{"version":3,"sources":["Views/Accounts/Login/Login.View.jsx"],"names":["parentTranslationPath","translationPath","LoginView","t","useTranslation","loginResponse","useSelector","state","LoginReducers","console","log","dispatch","useDispatch","LoginActions","login","useState","identity","password","rememberMe","organizationId","config","organizationsId","applicationId","loginDto","setLoginDto","animationStartClasses","setAnimationStartClasses","animationStart","setAnimationStart","isclick","setisclick","useEffect","token","localStorage","setItem","JSON","stringify","showSuccess","setTimeout","GlobalHistory","push","showError","Message","controlsHandler","useCallback","input","process","event","target","className","data","i18next","languages","value","language","onSelectChanged","languageChange","themeClass","noValidate","onSubmit","preventDefault","idRef","wrapperClasses","label","inputPlaceholder","onInputChanged","type","singleChecked","onSelectedCheckboxClicked","items","to","disabled"],"mappings":"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","file":"static/js/4.1ed867eb.chunk.js","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button } from '@material-ui/core';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useTranslation } from 'react-i18next';\r\nimport i18next from 'i18next';\r\n// import defaultLogo from '../../../assets/images/defaults/logo-crm.svg';\r\nimport { showSuccess, showError, GlobalHistory, languageChange } from '../../../Helpers';\r\nimport { config } from '../../../Configs';\r\n// import { ApplicationLogin } from '../../services';\r\nimport { LoginActions } from '../../../Store/Actions';\r\nimport { CheckboxesComponent, Inputs, SelectComponent } from '../../../Components';\r\nimport './Login.Style.scss';\r\n\r\nconst parentTranslationPath = 'LoginView';\r\nconst translationPath = '';\r\nconst LoginView = () => {\r\n  const { t } = useTranslation(parentTranslationPath);\r\n  const loginResponse = useSelector((state) => state.LoginReducers.loginResponse);\r\n  console.log(loginResponse);\r\n  const dispatch = useDispatch(LoginActions.login);\r\n  // const history = useHistory();\r\n  const [loginDto, setLoginDto] = useState({\r\n    identity: '',\r\n    password: '',\r\n    rememberMe: false,\r\n    organizationId: config.organizationsId,\r\n    applicationId: config.applicationId,\r\n  });\r\n  const [animationStartClasses, setAnimationStartClasses] = useState('');\r\n  const [animationStart, setAnimationStart] = useState(false);\r\n  const [isclick, setisclick] = useState(false);\r\n  const validationHandler = () => {\r\n    if (!loginDto.password || !loginDto.identity) return false;\r\n    if (!loginDto.password) return false;\r\n    return true;\r\n  };\r\n  const handleSubmit = (event) => {\r\n    setisclick(true);\r\n    event.preventDefault();\r\n    if (validationHandler()) dispatch(LoginActions.login(loginDto));\r\n  };\r\n  useEffect(() => {\r\n    if (loginResponse && !animationStart) {\r\n      if (loginResponse.token) {\r\n        localStorage.setItem('session', JSON.stringify(loginResponse));\r\n        showSuccess('Login Succssfuly');\r\n        setAnimationStartClasses(' in-animate');\r\n        setAnimationStart(true);\r\n        setTimeout(() => {\r\n          GlobalHistory.push('/home');\r\n        }, 300);\r\n        setisclick(false);\r\n      } else {\r\n        showError(t(`${loginResponse.Message}`));\r\n        setisclick(false);\r\n      }\r\n    }\r\n  }, [loginResponse, animationStart, t]);\r\n  const controlsHandler = useCallback(\r\n    (input, process) => (event) => {\r\n      setLoginDto({ ...loginDto, [input]: event.target[process] });\r\n    },\r\n    [setLoginDto, loginDto]\r\n  );\r\n  return (\r\n    <div className=\"login-wrapper\">\r\n      <div className=\"login-content-wrapper\">\r\n        <div className=\"text-section-wrapper\">\r\n          <div className=\"text-section-content\">\r\n            <span className=\"texts-header \">{t(`${translationPath}welcome-to`)}</span>\r\n            <span className=\"texts-header \">SILVER SCREEN</span>\r\n            <span className=\"texts c-black-dark fz-30px\">{t(`${translationPath}login-desc`)}</span>\r\n          </div>\r\n        </div>\r\n        <div className=\"box-section-wrapper\">\r\n          <div className=\"box-content\">\r\n            <div className=\"d-flex-v-center-h-between\">\r\n              <div className=\"logo-wrapper\">\r\n                {/* <img src={defaultLogo} className='logo' alt={t(`${translationPath}company-logo`)} /> */}\r\n                <span className=\"logo-name\">SILVER SCREEN</span>\r\n              </div>\r\n              <div className=\"px-2\">\r\n                <SelectComponent\r\n                  data={i18next.languages}\r\n                  value={i18next.language}\r\n                  onSelectChanged={languageChange}\r\n                  themeClass=\"theme-underline\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <form noValidate className=\"form-wrapper\" onSubmit={handleSubmit}>\r\n              <Inputs\r\n                idRef=\"identityRef\"\r\n                wrapperClasses=\"theme-underline\"\r\n                label={t(`${translationPath}identity`)}\r\n                inputPlaceholder={t(`${translationPath}ex-desc`)}\r\n                value={loginDto.identity}\r\n                onInputChanged={controlsHandler('identity', 'value')}\r\n              />\r\n              <Inputs\r\n                idRef=\"passwordRef\"\r\n                wrapperClasses=\"theme-underline\"\r\n                type=\"password\"\r\n                label={t(`${translationPath}password`)}\r\n                value={loginDto.password}\r\n                onInputChanged={controlsHandler('password', 'value')}\r\n              />\r\n              <div className=\"d-flex-v-center-h-between mb-3\">\r\n                <CheckboxesComponent\r\n                  idRef=\"rememberMeRef\"\r\n                  parentTranslationPath={parentTranslationPath}\r\n                  translationPath={translationPath}\r\n                  label=\"remember-me\"\r\n                  singleChecked={loginDto.rememberMe}\r\n                  themeClass=\"theme-secondary\"\r\n                  onSelectedCheckboxClicked={() => {\r\n                    setLoginDto((items) => ({ ...items, rememberMe: !items.rememberMe }));\r\n                  }}\r\n                />\r\n                <Link className=\"links\" to=\"/account/identity-verification\">\r\n                  {t(`${translationPath}forgot-password`)}\r\n                </Link>\r\n                <Link className=\"links\" to=\"/home\">\r\n                  {t(`${translationPath}Login Without Password`)}\r\n                </Link>\r\n              </div>\r\n              <div className=\"d-flex-v-center-h-end\">\r\n                <div className={`animated-btn-wrapper${animationStartClasses}`}>\r\n                  <Button\r\n                    className=\"btns theme-solid\"\r\n                    type=\"submit\"\r\n                    disabled={isclick || !loginDto.identity || !loginDto.password}\r\n                  >\r\n                    <span>{t(`${translationPath}start`)}</span>\r\n                  </Button>\r\n                  <span className=\"mdi mdi-chevron-double-right animated-icon\" />\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"light-shadow\" />\r\n    </div>\r\n  );\r\n};\r\nexport default LoginView;\r\n"],"sourceRoot":""}